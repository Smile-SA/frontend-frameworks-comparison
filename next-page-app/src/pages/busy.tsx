import { GetStaticProps, InferGetStaticPropsType } from "next";
import Head from "next/head";

import BusyHomepage, { IData } from "@/components/BusyHomepage";
import DynamicLayout from "@/layouts/DynamicLayout";

export default function Busy({
  data,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="icon"
          type="image/vnd.microsoft.icon"
          href="https://www.smile.eu/themes/custom/smileeu/favicon.ico"
        />
      </Head>
      <DynamicLayout>
        <BusyHomepage data={data} />
      </DynamicLayout>
    </>
  );
}

export const getStaticProps: GetStaticProps<{
  data: IData;
}> = async () => {
  const [cards, openSources, solutions, technologies, diff] = await Promise.all(
    [
      fetch("http://localhost:3333/cards").then((r) => r.json()),
      fetch("http://localhost:3333/opensource").then((r) => r.json()),
      fetch("http://localhost:3333/solutions").then((r) => r.json()),
      fetch("http://localhost:3333/technologies").then((r) => r.json()),
      new Promise((resolve) => {
        let start = performance.now();
        for (let i = 0; i < 100_000; i++) {
          for (let j = 0; j < 100_000; j++) {
            if (i % 2 === 0) {
              start += j;
            } else {
              start -= j;
            }
          }
        }
        resolve(Math.round(performance.now() - start));
      }),
    ]
  );
  const data: IData = {
    cards,
    diff: diff as number,
    openSources,
    solutions,
    technologies,
  };
  return { props: { data } };
};
