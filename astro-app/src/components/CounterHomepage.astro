---
import AsyncCards from "./AsyncCards.astro";
import AsyncMap from "./AsyncMap.astro";
import AsyncOpenSource from "./AsyncOpenSource.astro";
import AsyncTabs from "./AsyncTabs.astro";

const { data } = Astro.props;
const { cards, openSources, solutions, technologies } = data;
---

<section class="col-sm-12">
  <a id="main-content"></a>
  <div class="region region-content-top">
    <div data-drupal-messages-fallback="" class="hidden"></div>
  </div>

  <div class="region region-content">
    <article
      data-history-node-id="4"
      role="article"
      about="/fr/homepage"
      typeof="schema:WebPage"
      class="page full clearfix"
    >
      <div class="content">
        <div class="field--item">
          <div class="full-new-homepage">
            <div class="block-header-block homepage-yellow">
              <div class="logo-block-hp">
                <a href="#">
                  <img
                    class="block-content-block_header_block__btn-logo-smile"
                    src="https://www.smile.eu/themes/custom/smileeu/assets/images/icons/logo_yellow.png"
                  />
                </a>
              </div>
              <div class="container">
                <div
                  class="field field--name-field-header-text-paragraph field--type-entity-reference-revisions field--label-hidden field--item"
                >
                  <div
                    class="block-content-block_header_block__paragraph new-header-homepage"
                  >
                    <div class="text-new-header">
                      <p>CRÉATEUR D&apos;EXPÉRIENCE DIGITALE OUVERTE</p>
                    </div>
                    <div class="link-single-part">
                      <div class="link-content">
                        <a href="/fr/nos-references" class="btn blue">
                          Découvrez nos projets
                        </a>
                      </div>
                    </div>
                    <h1 class="tag-new-header">#MadeWithSmile</h1>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <AsyncOpenSource openSources={openSources} />
        <AsyncCards cards={cards} />
        <div class="field--item">
          <div class="block-content block-content-map">
            <div class="map--kpi">
              <div
                class="field field--name-field-map-kpi field--type-entity-reference field--label-hidden field--items"
              >
                <div class="field--item">
                  <div class="block-content block-content-kpi singleblock-text">
                    <div class="title">17</div>
                    <div class="subtitle">Agences</div>
                  </div>
                </div>
                <div class="field--item">
                  <div class="block-content block-content-kpi singleblock-text">
                    <div class="title">9</div>
                    <div class="subtitle">PAYS</div>
                  </div>
                </div>
                <div class="field--item">
                  <div class="block-content block-content-kpi singleblock-text">
                    <div class="title" id="count-render-el">0</div>
                    <div class="subtitle">SMILIENS</div>
                  </div>
                </div>
              </div>
              <div class="link-map">
                <div class="link-map-content">
                  <button
                    id="count-start-btn"
                    type="button"
                    style={{ border: 0, background: "transparent" }}
                  >
                    Découvrez smile
                  </button>
                </div>
              </div>
            </div>
            <AsyncMap />
          </div>
        </div>
        <AsyncTabs solutions={solutions} technologies={technologies} />
      </div>
    </article>
  </div>
</section>
<script>
  const btn = document.getElementById("count-start-btn");
  const el = document.getElementById("count-render-el")?.childNodes[0];
  // const el = document.getElementById("count-render-el");

  btn?.addEventListener("click", startCount);

  let count = 0;
  let start = false;
  let time = 0;

  const channel = new MessageChannel();
  const port = channel.port2;
  channel.port1.onmessage = () => {
      count = count + 1;
      render();
      increment();
    };

  function startCount(event: any) {
    event.preventDefault();
    if (count === 0) {
      time = Date.now();
      start = true;
      increment();
    } else {
      count = 0;
      render();
    }
  }

  function increment() {
    if (start) {
      if (Date.now() - time < 1000) {
        port.postMessage("");
      } else {
        start = false;
      }
    }
  }

  function render() {
    if (el) {
      // @ts-expect-error ignore
      el.nodeValue = count;
      // el.innerText = count;
    }
  }
</script>
